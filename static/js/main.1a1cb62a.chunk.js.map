{"version":3,"sources":["Constants.js","components/ThemeChanger.js","components/Style.js","components/ThemeDisplay.js","redux/actions/themeChanger.actions.js","App.js","serviceWorker.js","InitialStates.js","redux/reducers/themeChanger.reducer.js","redux/reducers/index.js","index.js"],"names":["themes","ThemeChanger","Constants","_this$props","this","props","activeTheme","onChangeActiveTheme","react_default","a","createElement","className","htmlFor","id","onChange","value","map","theme","index","key","_","upperFirst","React","Component","Style","styleLink","styleName","rel","href","ThemeDisplay","SET_THEME","setTheme","type","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_onChangeActiveTheme","bind","assertThisInitialized","event","target","actions","ThemeChanger_ThemeChanger","ThemeDisplay_ThemeDisplay","Style_Style","connect","state","themeChanger","dispatch","bindActionCreators","Boolean","window","location","hostname","match","arguments","length","undefined","InitialStates","action","objectSpread","rootReducer","combineReducers","store","createStore","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mXAAaA,SAAS,CAClB,WACA,QACA,SACA,SACA,SACA,UACA,SACA,QACA,MACA,UACA,QACA,QACA,YACA,UACA,UACA,QACA,QACA,WACA,YACA,SACA,0BCjBiBC,mLACR,IACED,EAAUE,EADZC,EAEsCC,KAAKC,MAAzCC,EAFFH,EAEEG,YAAaC,EAFfJ,EAEeI,oBACpB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAW,kBACZH,EAAAC,EAAAC,cAAA,SAAOC,UAAW,0BAA2BC,QAAS,SAAtD,iBACAJ,EAAAC,EAAAC,cAAA,OAAKC,UAAW,aACZH,EAAAC,EAAAC,cAAA,UAAQC,UAAW,eAAgBE,GAAI,QAASC,SAAUP,EAAqBQ,MAAOT,GACjFN,EAAOgB,IAAI,SAACC,EAAOC,GAAR,OACRV,EAAAC,EAAAC,cAAA,UAAQS,IAAKD,EAAOH,MAAOE,GAAQG,IAAEC,WAAWJ,gBAVlCK,IAAMC,WCF3BC,mLACR,IAECC,EAAY,4BADErB,KAAKC,MAAlBqB,UACqD,qBAC5D,OACIlB,EAAAC,EAAAC,cAAA,QAAMiB,IAAK,aAAcC,KAAMH,WALRH,IAAMC,WCApBM,mLAEb,OACIrB,EAAAC,EAAAC,cAAA,UAAQC,UAAW,mBAAnB,wBAH8BW,IAAMC,WCFnCO,EAAY,YAEZC,EAAW,SAACd,GAAD,MAAY,CAChCe,KAAMF,EACNb,UCMEgB,cACF,SAAAA,EAAY5B,GAAO,IAAA6B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA/B,KAAA6B,IACfC,EAAAC,OAAAE,EAAA,EAAAF,CAAA/B,KAAA+B,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAnC,KAAMC,KACDmC,qBAAuBN,EAAKM,qBAAqBC,KAA1BN,OAAAO,EAAA,EAAAP,QAAAO,EAAA,EAAAP,CAAAD,KAFbA,oFAKES,GACjB,IAAM5B,EAAQ4B,EAAMC,OAAO7B,MAC3BX,KAAKC,MAAMwC,QAAQd,SAAShB,oCAGvB,IACET,EAAeF,KAAKC,MAApBC,YACP,OACIE,EAAAC,EAAAC,cAAA,OAAKC,UAAW,mBACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAW,eAAf,kBACAH,EAAAC,EAAAC,cAACoC,EAAD,CAAcxC,YAAaA,EAAaC,oBAAqBH,KAAKoC,uBAClEhC,EAAAC,EAAAC,cAACqC,EAAD,MACAvC,EAAAC,EAAAC,cAACsC,EAAD,CAAOtB,UAAWpB,YAlBhBgB,IAAMC,WAgCT0B,cARS,SAACC,GAAD,MAAY,CAChC5C,YAAa4C,EAAMC,aAAa7C,cAGT,SAAC8C,GAAD,MAAe,CACtCP,QAASQ,YAAmBF,EAAcC,KAG/BH,CAA6ChB,GC9BxCqB,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,uEChBKP,EAAe,CACxB7C,YAAaJ,EAAiB,ICYnBiD,EAZM,WAAgD,IAA/CD,EAA+CS,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAvCG,EAA4BC,EAAWJ,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACjE,OAAQE,EAAO/B,MACX,KAAKF,EACD,OAAOK,OAAA6B,EAAA,EAAA7B,CAAA,GACAe,EADP,CAEI5C,YAAayD,EAAO9C,QAE5B,QACI,OAAOiC,ICJJe,EAJKC,YAAgB,CAChCf,iBCKEgB,EAAQC,YAAYH,GAC1BI,IAASC,OACL9D,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAUJ,MAAOA,GACb3D,EAAAC,EAAAC,cAAC8D,EAAD,OAEFC,SAASC,eAAe,SJmHtB,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GAC/BA,EAAaC","file":"static/js/main.1a1cb62a.chunk.js","sourcesContent":["export const themes = [\r\n    'cerulean',\r\n    'cosmo',\r\n    'cyborg',\r\n    'darkly',\r\n    'flatly',\r\n    'journal',\r\n    'litera',\r\n    'lumen',\r\n    'lux',\r\n    'materia',\r\n    'minty',\r\n    'pulse',\r\n    'sandstone',\r\n    'simplex',\r\n    'sketchy',\r\n    'slate',\r\n    'solar',\r\n    'spacelab',\r\n    'superhero',\r\n    'united',\r\n    'yeti',\r\n];","import React from 'react';\r\nimport * as Constants from '../Constants';\r\nimport _ from 'lodash';\r\n\r\nexport default class ThemeChanger extends React.Component {\r\n    render() {\r\n        const {themes} = Constants;\r\n        const {activeTheme, onChangeActiveTheme} = this.props;\r\n        return (\r\n            <div className={'form-group row'}>\r\n                <label className={'col-sm-2 col-form-label'} htmlFor={'theme'}>Select theme:</label>\r\n                <div className={'col-sm-10'}>\r\n                    <select className={'form-control'} id={'theme'} onChange={onChangeActiveTheme} value={activeTheme}>\r\n                        {themes.map((theme, index) => (\r\n                            <option key={index} value={theme}>{_.upperFirst(theme)}</option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class Style extends React.Component {\r\n    render() {\r\n        const {styleName} = this.props;\r\n        const styleLink = 'https://bootswatch.com/4/' + styleName + '/bootstrap.min.css';\r\n        return (\r\n            <link rel={'stylesheet'} href={styleLink}/>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\n\r\nexport default class ThemeDisplay extends React.Component {\r\n    render() {\r\n        return (\r\n            <button className={'btn btn-primary'}>Sample button</button>\r\n        )\r\n    }\r\n}","export const SET_THEME = 'SET_THEME';\r\n\r\nexport const setTheme = (theme) => ({\r\n    type: SET_THEME,\r\n    theme\r\n});","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport ThemeChanger from './components/ThemeChanger';\nimport Style from './components/Style';\nimport ThemeDisplay from './components/ThemeDisplay';\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport * as themeChanger from './redux/actions/themeChanger.actions';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this._onChangeActiveTheme = this._onChangeActiveTheme.bind(this);\n    }\n\n    _onChangeActiveTheme(event) {\n        const value = event.target.value;\n        this.props.actions.setTheme(value);\n    }\n\n    render() {\n        const {activeTheme} = this.props;\n        return (\n            <div className={'container-fluid'}>\n                <h1 className={'page-header'}>My Simple Page</h1>\n                <ThemeChanger activeTheme={activeTheme} onChangeActiveTheme={this._onChangeActiveTheme}/>\n                <ThemeDisplay/>\n                <Style styleName={activeTheme}/>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    activeTheme: state.themeChanger.activeTheme\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    actions: bindActionCreators(themeChanger, dispatch)\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import * as Constants from './Constants';\r\n\r\nexport const themeChanger = {\r\n    activeTheme: Constants.themes[0]\r\n};","import * as InitialStates from '../../InitialStates';\r\nimport {SET_THEME} from '../actions/themeChanger.actions';\r\n\r\nconst themeChanger = (state = InitialStates.themeChanger, action) => {\r\n    switch (action.type) {\r\n        case SET_THEME:\r\n            return {\r\n                ...state,\r\n                activeTheme: action.theme\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport default themeChanger;","import {combineReducers} from 'redux';\r\nimport themeChanger from \"./themeChanger.reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    themeChanger\r\n});\r\n\r\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport rootReducer from './redux/reducers';\n\nconst store = createStore(rootReducer);\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>\n    , document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}